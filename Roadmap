Full Course Roadmap

ðŸ“š Course Outline (Series 1):

**Part 1: Introduction to FastAPI and Setup**
	* What is fastAPI.
	* fastAPI vs existing API framework (i.e. Django and Flask)
	* Usecases of fastAPI
	* How to install fastAPI
	* Run the server

**Part 2: HTTP vs WebSocket, Your First GET API
	* When to use HTTP and WebSocket APIâ€™s in FastAPI.
	* What is HTTP API
	* Develop GET API though FastAPI 
	* Adding path parameter in API call 
	
**Part 3: Pydantic Basics, Data validation and BaseModel
	* Automatic Data Serialization and Deserialization.
	* Defining data models with type hints 
	* Data Validation with and without Basemodel.
	* Exclude specific fields after Data Validation.
	* FastAPI using Pydantic. -- Coding
	
**Part 4: Pydantic BaseModel vs FastAPI Body
	* Where to use FastAPI Body library
	* Developing API using FastAPI Body library
	* Developing API best way - "Hybrid". Using both FastAPI Body and Pydantic BaseModel. -- Coding
	
**Part 5: Master Data Injection & Python Annotated (Code Examples)
	* Concept of DI (Data Injection)
	* What is Annotated and How to Use Annotated
	* Practical Implementation of POST and GET API with DI 
	* How this Annotated worked (Code Explanation)

**Part 6: FastAPI Dynamic Pydantic Models with `create_model`
	* Problem Deep Dive (Real World Problem)
	* Solution: pydantic.create_model
	* Implementation: Dynamic Request Bodies
	* Implementation: Dynamic Response Models
	* Adding Validation
	
**Part 7: Async PostgreSQL with SQLModel, Asyncpg & Best Project Structure
	* What is SQLModel
	* Setting Up Async Operations with asyncpg
	* FastAPI Integration: Async Session Dependency
	* Asynchronous CRUD Operations
	* Migrations with Alembic (Async)
	* Handling Relationships Asynchronously
	* Good to have project structure
	
**Part 8: Full-Stack App with FastAPI and React (From Scratch)
	* Backend Setup
	* Database Model with SQLModel & Pydantic
	* Creating FastAPI CRUD Endpoints
	* CORS Middleware
	* Frontend Setup: React & Vite
	* Testing Application
	
**Part 9: Advanced Error Handling & Path/Query Validation
	* Default Mechanisms & HTTPException
	* Custom Exception Handlers
	* Handling Pydantic Validation Errors 
	* Error Handling Structure & Strategy
	* Using Query for Validation & Metadata
	* Handling Multiple Values (Lists)
	* Required Query Parameters with Query
	* Problem-Driven Examples
	
**Part 10: Secure APIs with JWT Authentication & Authorization (RBAC)
	* AuthN vs. AuthZ & JWT Explained
	* Password Hashing with Passlib
	* Creating the JWT Login Endpoint
	* Protecting Endpoints with JWT Authentication
	* Implementing Role-Based Authorization (RBAC)
	
**Part 11: Integrating Third-Party APIs Asynchronously
	* Project Setup
	* Secure API Key Handling
	* Core FastAPI Endpoint Definition
	* Calling the External API (Asynchronously)

**Part 12: Mastering Async Operations with Asyncio (Most Important)
	* The Problem: Synchronous Blocking I/O
	* The Solution: Python's asyncio
	* Compare Performance
	
**Part 13: Testing FastAPI Applications with Pytest & Mocking
	* What is Pytest
	* Setting Up the Testing Environment
	* Basic Endpoint Testing with TestClient
	* Real-World Scenario
	* Mastering Dependency Mocking
	* Testing Specific FastAPI Features
	
**Part 14 Docker & Docker Compose for Scalable Deployment
	* Essential FastAPI Concepts for Containerization
	* Crafting an Optimized Dockerfile for FastAPI
	* Leveraging Docker Compose for Multi-Container Setups
	* Managing Configuration and Secrets
	* Deployment Strategies and Best Practices
	
**Part 15: Q&A and Community Interaction (If required will do the Live session too)

Series 2: Advanced FastAPI WebSocket Development
Series 3: Full Project Deployment Automation (AWS, Azure, GCP)
